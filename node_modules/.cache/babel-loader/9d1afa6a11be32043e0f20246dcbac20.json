{"ast":null,"code":"'use strict';\n\nvar isFunction = function () {\n  function typeOfFn(fn) {\n    return typeof fn === 'function';\n  }\n\n  function objectFn(fn) {\n    return Object.prototype.toString.call(fn) === '[object Function]';\n  } // typeof is fastest way to check if a function but older IEs don't support it for that and Chrome had a bug\n\n\n  if (typeof typeOfFn === 'function' && typeof /./ !== 'function') {\n    return typeOfFn;\n  }\n\n  return objectFn;\n}();\n\nvar cache = [];\n\nfunction getCallbackHandlers(callback) {\n  // flush cache if we have too many items\n  if (cache.length > 10000) {\n    if (typeof console !== 'undefined' && 'log' in console) {\n      console.log('tapOrClick cache flushed after 10000 items; check your renders if this happens often');\n    }\n\n    cache.length = 0;\n  }\n\n  var handler = cache.filter(function (handler) {\n    return handler.callback === callback;\n  })[0];\n\n  if (!handler) {\n    var state = {};\n    handler = {\n      callback: callback,\n      touchStart: function (event) {\n        if (event.defaultPrevented) {\n          return;\n        }\n\n        clearTimeout(state.touchTimeout);\n        state.touchClick = true;\n        callback(event);\n      },\n      touchEnd: function (event) {\n        if (state.touchClick) {\n          state.touchTimeout = setTimeout(function () {\n            state.touchClick = false;\n            state.touchTimeout = null;\n          }, 300);\n        }\n      },\n      click: function (event) {\n        if (event.defaultPrevented || state.touchClick) {\n          return;\n        }\n\n        callback(event);\n      }\n    };\n    cache.push(handler);\n  }\n\n  return handler;\n} // event handlers are unnecessary server side\n\n\nif (typeof window === 'undefined') {\n  module.exports = function (callback, props) {\n    if (props == null) {\n      props = {};\n    }\n\n    return props;\n  };\n} else {\n  module.exports = function tapOrClick(callback, props) {\n    if (props == null) {\n      props = {};\n    } else if (typeof props !== 'object') {\n      throw new Error('Optional second argument to tapOrClick must be a mutable object');\n    }\n\n    var handlers = getCallbackHandlers(callback);\n    props.onTouchStart = handlers.touchStart;\n    props.onTouchEnd = handlers.touchEnd;\n    props.onClick = handlers.click;\n    return props;\n  };\n}","map":{"version":3,"sources":["/Users/mac/Desktop/circles-web/node_modules/react-tap-or-click/index.js"],"names":["isFunction","typeOfFn","fn","objectFn","Object","prototype","toString","call","cache","getCallbackHandlers","callback","length","console","log","handler","filter","state","touchStart","event","defaultPrevented","clearTimeout","touchTimeout","touchClick","touchEnd","setTimeout","click","push","window","module","exports","props","tapOrClick","Error","handlers","onTouchStart","onTouchEnd","onClick"],"mappings":"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","sourcesContent":["'use strict'\n\nvar isFunction = (function() {\n    function typeOfFn(fn) {\n        return typeof fn === 'function'\n    }\n\n    function objectFn(fn) {\n        return Object.prototype.toString.call(fn) === '[object Function]'\n    }\n\n    // typeof is fastest way to check if a function but older IEs don't support it for that and Chrome had a bug\n    if (typeof typeOfFn === 'function' && typeof /./ !== 'function') {\n        return typeOfFn\n    }\n\n    return objectFn\n})()\n\nvar cache = []\n\nfunction getCallbackHandlers(callback) {\n    // flush cache if we have too many items\n    if (cache.length > 10000) {\n        if (typeof console !== 'undefined' && 'log' in console) {\n            console.log('tapOrClick cache flushed after 10000 items; check your renders if this happens often')\n        }\n        cache.length = 0\n    }\n\n    var handler = cache.filter(function(handler) {\n        return handler.callback === callback\n    })[0]\n\n    if (!handler) {\n        var state = {}\n\n        handler = {\n            callback: callback,\n            touchStart: function(event) {\n                if (event.defaultPrevented) {\n                    return\n                }\n\n                clearTimeout(state.touchTimeout)\n                state.touchClick = true\n                callback(event)\n            },\n            touchEnd: function(event) {\n                if (state.touchClick) {\n                    state.touchTimeout = setTimeout(function() {\n                        state.touchClick = false\n                        state.touchTimeout = null\n                    }, 300)\n                }\n            },\n            click: function(event) {\n                if (event.defaultPrevented || state.touchClick) {\n                    return\n                }\n                callback(event)\n            }\n        }\n\n        cache.push(handler)\n    }\n\n    return handler\n}\n\n// event handlers are unnecessary server side\nif (typeof window === 'undefined') {\n    module.exports = function(callback, props) {\n        if (props == null) {\n            props = {}\n        }\n        return props\n    }\n} else {\n    module.exports = function tapOrClick(callback, props) {\n        if (props == null) {\n            props = {}\n        } else if (typeof props !== 'object') {\n            throw new Error('Optional second argument to tapOrClick must be a mutable object')\n        }\n\n        var handlers = getCallbackHandlers(callback)\n\n        props.onTouchStart = handlers.touchStart\n        props.onTouchEnd = handlers.touchEnd\n        props.onClick = handlers.click\n\n        return props\n    }\n}\n"]},"metadata":{},"sourceType":"script"}