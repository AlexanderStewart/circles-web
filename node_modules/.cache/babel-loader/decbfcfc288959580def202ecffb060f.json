{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/circles-web/src/App.js\";\nimport React from \"react\"; //Imports.\n\nimport \"./style/index.css\";\nimport Board from \"./components/Board\";\nimport { myColors } from \"./style/colors.js\";\nimport { circleStates } from \"./logic.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    var circleValues = Array(16).fill(null);\n    circleValues[5] = 1;\n    circleValues[10] = 2;\n    var circleColors = Array(16).fill(myColors.nonActive);\n    circleColors[5] = myColors.active;\n    circleColors[10] = myColors.active;\n    var circleStates = Array(16).fill(\"nonactive\");\n    circleStates[5] = \"active\";\n    circleStates[10] = \"active\";\n    var selected = 0;\n    this.state = {\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleStates: circleStates,\n      selected: selected\n    };\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"circle \" + i + \" clicked\");\n    var circleValues = this.state.circleValues;\n    var circleColors = this.state.circleColors;\n    var circleStates = this.state.circleStates;\n    var selected = this.state.selected; //Handles the main logic of the game alongside /src/logic.js\n\n    switch (circleStates[i]) {\n      case \"nonactive\":\n        if (selected === 2 && twoSelectedBeside(i, circleStates)) {\n          changeCircleTo(i, \"active\");\n        }\n\n        break;\n\n      case \"active\":\n        selected++;\n        changeCircleTo(i, \"selected\");\n        break;\n\n      case \"selected\":\n        selected--;\n        changeCircleTo(i, \"active\");\n        break;\n\n      default:\n        break;\n    } //Handles changing a given circle to a given state.\n\n\n    function changeCircleTo(i, state) {\n      switch (state) {\n        case \"nonactive\":\n          circleColors[i] = myColors.nonActive;\n          circleStates[i] = \"nonactive\";\n          break;\n\n        case \"active\":\n          circleColors[i] = myColors.active;\n          circleStates[i] = \"active\";\n          break;\n\n        case \"selected\":\n          circleColors[i] = myColors.selected;\n          circleStates[i] = \"selected\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.setState({\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleStates: circleStates,\n      selected: selected\n    });\n  }\n\n  render() {\n    const circleValues = this.state.circleValues;\n    const circleColors = this.state.circleColors;\n    return React.createElement(\"div\", {\n      className: \"app\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }, React.createElement(Board, {\n      circleValues: circleValues,\n      circleColors: circleColors,\n      onClick: this.handleClick,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/mac/Desktop/circles-web/src/App.js"],"names":["React","Board","myColors","circleStates","App","Component","constructor","props","circleValues","Array","fill","circleColors","nonActive","active","selected","state","handleClick","bind","i","console","log","twoSelectedBeside","changeCircleTo","setState","render"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n//Imports.\nimport \"./style/index.css\";\nimport Board from \"./components/Board\";\nimport { myColors } from \"./style/colors.js\";\nimport { circleStates } from \"./logic.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    var circleValues = Array(16).fill(null);\n    circleValues[5] = 1;\n    circleValues[10] = 2;\n\n    var circleColors = Array(16).fill(myColors.nonActive);\n    circleColors[5] = myColors.active;\n    circleColors[10] = myColors.active;\n\n    var circleStates = Array(16).fill(\"nonactive\");\n    circleStates[5] = \"active\";\n    circleStates[10] = \"active\";\n\n    var selected = 0;\n\n    this.state = {\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleStates: circleStates,\n      selected: selected\n    };\n\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  handleClick(i) {\n    console.log(\"circle \" + i + \" clicked\");\n\n    var circleValues = this.state.circleValues;\n    var circleColors = this.state.circleColors;\n    var circleStates = this.state.circleStates;\n    var selected = this.state.selected;\n\n    //Handles the main logic of the game alongside /src/logic.js\n    switch (circleStates[i]) {\n      case \"nonactive\":\n        if (selected === 2 && twoSelectedBeside(i, circleStates)) {\n          changeCircleTo(i, \"active\");\n        }\n        break;\n\n      case \"active\":\n        selected++;\n        changeCircleTo(i, \"selected\");\n        break;\n\n      case \"selected\":\n        selected--;\n        changeCircleTo(i, \"active\");\n        break;\n\n      default:\n        break;\n    }\n\n    //Handles changing a given circle to a given state.\n    function changeCircleTo(i, state) {\n      switch (state) {\n        case \"nonactive\":\n          circleColors[i] = myColors.nonActive;\n          circleStates[i] = \"nonactive\";\n          break;\n\n        case \"active\":\n          circleColors[i] = myColors.active;\n          circleStates[i] = \"active\";\n          break;\n\n        case \"selected\":\n          circleColors[i] = myColors.selected;\n          circleStates[i] = \"selected\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.setState({\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleStates: circleStates,\n      selected: selected\n    });\n  }\n\n  render() {\n    const circleValues = this.state.circleValues;\n    const circleColors = this.state.circleColors;\n\n    return (\n      <div className=\"app\">\n        <Board\n          circleValues={circleValues}\n          circleColors={circleColors}\n          onClick={this.handleClick}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}