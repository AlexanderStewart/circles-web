{"ast":null,"code":"import _classCallCheck from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/Users/mac/Desktop/circles-web/node_modules/@babel/runtime/helpers/esm/inherits\";import React from\"react\";//Imports.\nimport\"./style/index.scss\";import\"./style/board.scss\";import Board from\"./components/Board\";import{myColors}from\"./style/colors.js\";import{selectedBeside}from\"./logic/checkBeside.js\";import{selectedNums}from\"./logic/selectedNums.js\";var App=/*#__PURE__*/function(_React$Component){_inherits(App,_React$Component);function App(props){var _this;_classCallCheck(this,App);_this=_possibleConstructorReturn(this,_getPrototypeOf(App).call(this,props));//Set board.\nvar circleValues=Array(16).fill(null);circleValues[5]=1;circleValues[10]=2;circleValues[6]=3;var circleColors=Array(16).fill(myColors.nonActive);circleColors[5]=myColors.active;circleColors[10]=myColors.active;circleColors[6]=myColors.nonActive;var circleTextColors=Array(16).fill(myColors.background);circleTextColors[6]=myColors.goldText;var circleBorderColor=Array(16).fill(myColors.nonActive);circleBorderColor[5]=myColors.active;circleBorderColor[10]=myColors.active;circleBorderColor[6]=myColors.gold;var circleStates=Array(16).fill(\"nonactive\");circleStates[5]=\"active\";circleStates[10]=\"active\";circleStates[6]=\"gold\";var selected=0;_this.state={circleValues:circleValues,circleColors:circleColors,circleTextColors:circleTextColors,circleBorderColor:circleBorderColor,circleStates:circleStates,selected:selected};_this.handleTap=_this.handleTap.bind(_assertThisInitialized(_this));return _this;}_createClass(App,[{key:\"handleTap\",value:function handleTap(i){console.log(\"circle \"+i+\" tapped\");var circleValues=this.state.circleValues;var circleColors=this.state.circleColors;var circleTextColors=this.state.circleTextColors;var circleBorderColor=this.state.circleBorderColor;var circleStates=this.state.circleStates;var selected=this.state.selected;//Handles the main logic of the game alongside /src/logic.js\nswitch(circleStates[i]){//Nonactive circle tapped.\ncase\"nonactive\":if(selected===2&&selectedBeside(i,circleStates)){changeCircleTo(i,\"active\");var sum=selectedNums(circleStates,circleValues);circleValues[i]=sum;deselect();}break;//Active circle tapped.\ncase\"active\":console.log(\"selected: \"+selected);if(selected>=2){deselect();}if(!selectedBeside(i,circleStates)){deselect();}selected++;changeCircleTo(i,\"selected\");break;//Selected circle tapped.\ncase\"selected\":selected--;deselect();break;case\"gold\":break;default:break;}//Deselect all selected circles\nfunction deselect(){for(var z=0;z<=15;z++){if(circleStates[z]===\"selected\"){changeCircleTo(z,\"active\");}}selected=0;}//Handles changing a given circle to a given state.\nfunction changeCircleTo(i,state){switch(state){case\"nonactive\":circleColors[i]=myColors.nonActive;circleTextColors=myColors.background;circleBorderColor[i]=myColors.nonActive;circleStates[i]=\"nonactive\";break;case\"active\":circleColors[i]=myColors.active;circleTextColors=myColors.background;circleBorderColor[i]=myColors.active;circleStates[i]=\"active\";break;case\"selected\":circleColors[i]=myColors.selected;circleTextColors=myColors.background;circleBorderColor[i]=myColors.selected;circleStates[i]=\"selected\";break;case\"gold\":circleColors[i]=myColors.nonActive;circleTextColors=myColors.goldText;circleBorderColor[i]=myColors.gold;circleStates[i]=\"gold\";break;default:break;}}this.setState({circleValues:circleValues,circleColors:circleColors,circleTextColors:circleTextColors,circleBorderColor:circleBorderColor,circleStates:circleStates,selected:selected});}},{key:\"render\",value:function render(){var circleValues=this.state.circleValues;var circleColors=this.state.circleColors;var circleTextColors=this.state.circleTextColors;var circleBorderColor=this.state.circleBorderColor;return React.createElement(\"div\",{class:\"global-width\"},React.createElement(\"div\",{class:\"space-above-title\"}),React.createElement(\"div\",{className:\"title\"},\"circles\"),React.createElement(\"div\",{className:\"content-space-a\"}),React.createElement(Board,{circleValues:circleValues,circleColors:circleColors,circleTextColors:circleTextColors,circleBorderColor:circleBorderColor,onPointerDown:this.handleTap}),React.createElement(\"div\",{className:\"content-space-b\"}),React.createElement(\"div\",{className:\"line-break\"}),React.createElement(\"div\",{className:\"content-space-b\"}),React.createElement(\"div\",{className:\"bottom-text-container\"},React.createElement(\"div\",{className:\"github-link-text\"},React.createElement(\"strong\",null,\"How To Play: \"),\"Select any two adjacent green circles and then select an empty circle adjacent to one of them. The new circle's value is the sum of the previously selected circles.\",React.createElement(\"br\",null),React.createElement(\"br\",null),\"The purpose of the game is to fill in the gold circle with a green circle that has the same number.\"),React.createElement(\"br\",null),React.createElement(\"div\",{className:\"github-link-text\"},\"find the code here: \",React.createElement(\"br\",null),React.createElement(\"a\",{className:\"github-link\",href:\"https://github.com/AlexanderStewart/circles-web\"},\"github.com/alexanderstewart/circles-web\"))));}}]);return App;}(React.Component);export default App;","map":{"version":3,"sources":["/Users/mac/Desktop/circles-web/src/App.js"],"names":["React","Board","myColors","selectedBeside","selectedNums","App","props","circleValues","Array","fill","circleColors","nonActive","active","circleTextColors","background","goldText","circleBorderColor","gold","circleStates","selected","state","handleTap","bind","i","console","log","changeCircleTo","sum","deselect","z","setState","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\n\n//Imports.\nimport \"./style/index.scss\";\nimport \"./style/board.scss\";\nimport Board from \"./components/Board\";\nimport { myColors } from \"./style/colors.js\";\nimport { selectedBeside } from \"./logic/checkBeside.js\";\nimport { selectedNums } from \"./logic/selectedNums.js\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    //Set board.\n    var circleValues = Array(16).fill(null);\n    circleValues[5] = 1;\n    circleValues[10] = 2;\n    circleValues[6] = 3;\n\n    var circleColors = Array(16).fill(myColors.nonActive);\n    circleColors[5] = myColors.active;\n    circleColors[10] = myColors.active;\n    circleColors[6] = myColors.nonActive;\n\n    var circleTextColors = Array(16).fill(myColors.background);\n    circleTextColors[6] = myColors.goldText;\n\n    var circleBorderColor = Array(16).fill(myColors.nonActive);\n    circleBorderColor[5] = myColors.active;\n    circleBorderColor[10] = myColors.active;\n    circleBorderColor[6] = myColors.gold;\n\n    var circleStates = Array(16).fill(\"nonactive\");\n    circleStates[5] = \"active\";\n    circleStates[10] = \"active\";\n    circleStates[6] = \"gold\";\n\n    var selected = 0;\n\n    this.state = {\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleTextColors: circleTextColors,\n      circleBorderColor: circleBorderColor,\n      circleStates: circleStates,\n      selected: selected\n    };\n\n    this.handleTap = this.handleTap.bind(this);\n  }\n\n  handleTap(i) {\n    console.log(\"circle \" + i + \" tapped\");\n\n    var circleValues = this.state.circleValues;\n    var circleColors = this.state.circleColors;\n    var circleTextColors = this.state.circleTextColors;\n    var circleBorderColor = this.state.circleBorderColor;\n    var circleStates = this.state.circleStates;\n    var selected = this.state.selected;\n\n    //Handles the main logic of the game alongside /src/logic.js\n    switch (circleStates[i]) {\n      //Nonactive circle tapped.\n      case \"nonactive\":\n        if (selected === 2 && selectedBeside(i, circleStates)) {\n          changeCircleTo(i, \"active\");\n\n          var sum = selectedNums(circleStates, circleValues);\n          circleValues[i] = sum;\n\n          deselect();\n        }\n        break;\n\n      //Active circle tapped.\n      case \"active\":\n        console.log(\"selected: \" + selected);\n        if (selected >= 2) {\n          deselect();\n        }\n        if (!selectedBeside(i, circleStates)) {\n          deselect();\n        }\n        selected++;\n        changeCircleTo(i, \"selected\");\n        break;\n\n      //Selected circle tapped.\n      case \"selected\":\n        selected--;\n        deselect();\n        break;\n\n      case \"gold\":\n        break;\n      \n      default:\n        break;\n    }\n\n    //Deselect all selected circles\n    function deselect() {\n      for (var z = 0; z <= 15; z++) {\n        if (circleStates[z] === \"selected\") {\n          changeCircleTo(z, \"active\");\n        }\n      }\n      selected = 0;\n    }\n\n    //Handles changing a given circle to a given state.\n    function changeCircleTo(i, state) {\n      switch (state) {\n        case \"nonactive\":\n          circleColors[i] = myColors.nonActive;\n          circleTextColors = myColors.background;\n          circleBorderColor[i] = myColors.nonActive;\n          circleStates[i] = \"nonactive\";\n          break;\n\n        case \"active\":\n          circleColors[i] = myColors.active;\n          circleTextColors = myColors.background;\n          circleBorderColor[i] = myColors.active;\n          circleStates[i] = \"active\";\n          break;\n\n        case \"selected\":\n          circleColors[i] = myColors.selected;\n          circleTextColors = myColors.background;\n          circleBorderColor[i] = myColors.selected;\n          circleStates[i] = \"selected\";\n          break;\n\n        case \"gold\":\n          circleColors[i] = myColors.nonActive;\n          circleTextColors = myColors.goldText;\n          circleBorderColor[i] = myColors.gold;\n          circleStates[i] = \"gold\";\n          break;\n\n        default:\n          break;\n      }\n    }\n\n    this.setState({\n      circleValues: circleValues,\n      circleColors: circleColors,\n      circleTextColors: circleTextColors,\n      circleBorderColor: circleBorderColor,\n      circleStates: circleStates,\n      selected: selected\n    });\n  }\n\n  render() {\n    const circleValues = this.state.circleValues;\n    const circleColors = this.state.circleColors;\n    const circleTextColors = this.state.circleTextColors;\n    const circleBorderColor = this.state.circleBorderColor;\n\n    return (\n      <div class=\"global-width\">\n        <div class=\"space-above-title\"></div>\n        <div className=\"title\">circles</div>\n        <div className=\"content-space-a\"></div>\n        <Board\n          circleValues={circleValues}\n          circleColors={circleColors}\n          circleTextColors={circleTextColors}\n          circleBorderColor={circleBorderColor}\n          onPointerDown={this.handleTap}\n        />\n        <div className=\"content-space-b\"></div>\n        <div className=\"line-break\"></div>\n        <div className=\"content-space-b\"></div>\n        <div className=\"bottom-text-container\">\n          <div className=\"github-link-text\">\n            <strong>How To Play: </strong>Select any two \n            adjacent green circles and then select an empty \n            circle adjacent to one of them. The new circle's \n            value is the sum of the previously selected \n            circles.\n            <br></br>\n            <br></br>\n            The purpose of the game is to fill in the \n            gold circle with a green circle that has \n            the same number. \n          </div>\n          <br></br>\n          <div className=\"github-link-text\">\n            find the code here: <br></br>\n            <a className=\"github-link\" href=\"https://github.com/AlexanderStewart/circles-web\">\n              github.com/alexanderstewart/circles-web\n            </a>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}